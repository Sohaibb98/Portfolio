package TypeChecker;

import AST.*;
import Utilities.Error;
import Utilities.SymbolTable;
import Utilities.Visitor;
import java.util.*;
import java.math.*;

public class TypeChecker extends Visitor {

    public static ClassBodyDecl findMethod(Sequence candidateMethods, String name, Sequence actualParams, 
					   boolean lookingForMethods) {
	
    if (candidateMethods==null)
    	candidateMethods = staticTCer.currentClass.allMethods;
	if (lookingForMethods) {
	    println("+------------- findMethod (Method) ------------");
	    println("| Looking for method: " + name);
	} else {
	    println("+---------- findMethod (Constructor) ----------");
	    println("| Looking for constructor: " + name);
	}
	println("| With parameters:");
	for (int i=0; i<actualParams.nchildren; i++){
	    println("|   " + i + ". " + ((actualParams.children[i] instanceof ParamDecl)?(((ParamDecl)actualParams.children[i]).type()):((Expression)actualParams.children[i]).type));
	}
	// The number of actual parameters in the invocation.
	int count = 0;
	
	// Make an array big enough to hold all the methods if needed
	ClassBodyDecl cds[] = new ClassBodyDecl[candidateMethods.nchildren];
	
	// Initialize the array to point to null
	for(int i=0;i<candidateMethods.nchildren;i++) 
	    cds[i] = null;
	
	Sequence args = actualParams;
	Sequence params;
	
	// Insert all the methods from the symbol table that:
	// 1.) has the right number of parameters
	// 2.) each formal parameter can be assigned its corresponding
	//     actual parameter.
	if (lookingForMethods)
	    println("| Finding methods with the right number of parameters and types");
	else
	    println("| Finding constructors with the right number of parameters and types");
	for (int cnt=0; cnt<candidateMethods.nchildren; cnt++) {
	    ClassBodyDecl cbd = (ClassBodyDecl)candidateMethods.children[cnt];
	    
	    // if the method doesn't have the right name, move on!
	    if (!(cbd.getname().equals(name)))
		continue;
	    
	    // Fill params with the formal parameters.
	    if (cbd instanceof ConstructorDecl) 
		params = ((ConstructorDecl)cbd).params();
	    else if (cbd instanceof MethodDecl)
		params = ((MethodDecl)cbd).params();
	    else
		// we have a static initializer, don't do anything - just skip it.
		continue;
	    
	    print("|   " + name + "(");
	    if (cbd instanceof ConstructorDecl) 
		print(Type.parseSignature(((ConstructorDecl)cbd).paramSignature()));
	    else 
		print(Type.parseSignature(((MethodDecl)cbd).paramSignature()));
	    print(" )  ");
	    
	    if (args.nchildren == params.nchildren) {
		// The have the same number of parameters
		// now check that the formal parameters are
		// assignmentcompatible with respect to the 
		// types of the actual parameters.
		// OBS this assumes the type field of the actual
		// parameters has been set (in Expression.java),
		// so make sure to call visit on the parameters first.
		boolean candidate = true;
		
		for (int i=0;i<args.nchildren; i++) {
			if (args.children[i] instanceof Expression)
				((Expression)args.children[i]).visit(staticTCer);
		    candidate = candidate &&
			Type.assignmentCompatible(((ParamDecl)params.children[i]).type(),
						  (args.children[i] instanceof Expression) ?
						  ((Expression)args.children[i]).type :
						  ((ParamDecl)args.children[i]).type());
		    
		    if (!candidate) {
			println(" discarded");
			break;
		    }
		}
		if (candidate) {
		    println(" kept");
		    cds[count++] = cbd;
		}
	    }
	    else {
		println(" discarded");
	    }
	    
	}
	// now count == the number of candidates, and cds is the array with them.
	// if there is only one just return it!
	println("| " + count + " candidate(s) were found:");
	for ( int i=0;i<count;i++) {
	    ClassBodyDecl cbd = cds[i];
	    print("|   " + name + "(");
	    if (cbd instanceof ConstructorDecl) 
		print(Type.parseSignature(((ConstructorDecl)cbd).paramSignature()));
	    else 
		print(Type.parseSignature(((MethodDecl)cbd).paramSignature()));
	    println(" )");
	}
	
	if (count == 0) {
	    println("| No candidates were found.");
	    println("+------------- End of findMethod --------------");
	    return null;
	}
	
	if (count == 1) {
	    println("| Only one candidate - thats the one we will call then ;-)");
	    println("+------------- End of findMethod --------------");
	    return cds[0];
	}
	println("| Oh no, more than one candidate, now we must eliminate some >:-}");
	// there were more than one candidate.
	ClassBodyDecl x,y;
	int noCandidates = count;
	
	for (int i=0; i<count; i++) {
	    // take out a candidate
	    x = cds[i];
	    
	    if (x == null)
		continue;		    
	    cds[i] = null; // this way we won't find x in the next loop;
	    
	    // compare to all other candidates y. If any of these
	    // are less specialised, i.e. all types of x are 
	    // assignment compatible with those of y, y can be removed.
	    for (int j=0; j<count; j++) {
		y = cds[j];
		if (y == null) 
		    continue;
		
		boolean candidate = true;
		
		// Grab the parameters out of x and y
		Sequence xParams, yParams;
		if (x instanceof ConstructorDecl) {
		    xParams = ((ConstructorDecl)x).params();
		    yParams = ((ConstructorDecl)y).params();
		} else {
		    xParams = ((MethodDecl)x).params();
		    yParams = ((MethodDecl)y).params();
		}
		
		// now check is y[k] <: x[k] for all k. If it does remove y.
		// i.e. check if y[k] is a superclass of x[k] for all k.
		for (int k=0; k<xParams.nchildren; k++) {
		    candidate = candidate &&
			Type.assignmentCompatible(((ParamDecl)yParams.children[k]).type(),
						  ((ParamDecl)xParams.children[k]).type());
		    
		    if (!candidate)
			break;
		}
		if (candidate) {
		    // x is more specialized than y, so throw y away.
		    print("|   " + name + "(");
		    if (y instanceof ConstructorDecl) 
			print(Type.parseSignature(((ConstructorDecl)y).paramSignature()));
		    else 
			print(Type.parseSignature(((MethodDecl)y).paramSignature()));
		    print(" ) is less specialized than " + name + "(");
		    if (x instanceof ConstructorDecl) 
			print(Type.parseSignature(((ConstructorDecl)x).paramSignature()));
		    else 
			print(Type.parseSignature(((MethodDecl)x).paramSignature()));
		    println(" ) and is thus thrown away!");
		    
		    cds[j] = null;
		    noCandidates--;
		}
	    }
	    // now put x back in to cds
	    cds[i] = x;
	}
	if (noCandidates != 1) {
	    // illegal function call
	    println("| There is more than one candidate left!");
	    println("+------------- End of findMethod --------------");
	    return null;
	}
	
	// just find it and return it.
	println("| We were left with exactly one candidate to call!");
	println("+------------- End of findMethod --------------");
	for (int i=0; i<count; i++)
	    if (cds[i] != null)
		return cds[i];
	
	return null;
    }
    
    public void listCandidates(ClassDecl cd, Sequence candidateMethods, String name) {

	for (int cnt=0; cnt<candidateMethods.nchildren; cnt++) {
	    ClassBodyDecl cbd = (ClassBodyDecl)(candidateMethods.children[cnt]);

	    if (cbd.getname().equals(name)) {
		if (cbd instanceof MethodDecl)
		    System.out.println("  " + name + "(" + Type.parseSignature(((MethodDecl)cbd).paramSignature()) + " )");
		else
		    System.out.println("  " + cd.name() + "(" + Type.parseSignature(((ConstructorDecl)cbd).paramSignature()) + " )");
	    }
	}
    }

    private SymbolTable   classTable;
    private ClassDecl     currentClass;
    private ClassBodyDecl currentContext;
    private FieldDecl currentFieldDecl; // keep track of the currentFieldDecl 
    private boolean inFieldInit;        //
    private Sequence currentSequence;
    private static TypeChecker staticTCer;
	
    public TypeChecker(SymbolTable classTable, boolean debug) { 
	this.classTable = classTable; 
	this.debug = debug;
	staticTCer = this;
    }

    /** ArrayAccessExpr */
    public Object visitArrayAccessExpr(ArrayAccessExpr ae) {
	println(ae.line + ": Visiting ArrayAccessExpr");
	// YOUR CODE HERE
	return ae.type;
    }

    /** ArrayType */
    public Object visitArrayType(ArrayType at) {
	println(at.line + ": Visiting an ArrayType");
	println(at.line + ": ArrayType type is " + at);
	return at;
    }

    /** NewArray */
    public Object visitNewArray(NewArray ne) {
	println(ne.line + ": Visiting a NewArray " + ne.dimsExpr().nchildren + " " + ne.dims().nchildren);
	// YOUR CODE HERE
	println(ne.line + ": NewArray type is " + ne.type);
	return ne.type;
    }


    // TODO: Espresso doesn't allow 'int[][] a = new int[]{ f(), f() }} where f returns an array

    public boolean arrayAssignmentCompatible(Type t, Expression e) {
	if (t instanceof ArrayType && (e instanceof ArrayLiteral)) {
	    ArrayType at = (ArrayType)t;
	    e.type = at; //  we don't know that this is the type - but if we make it through it will be!
	    ArrayLiteral al = (ArrayLiteral)e;
	    
	    // t is an array type i.e. XXXXXX[ ]
	    // e is an array literal, i.e., { }
	    if (al.elements().nchildren == 0) // the array literal is { }
		return true;   // any array variable can hold an empty array
	    // Now check that XXXXXX can hold value of the elements of al
	    // we have to make a new type: either the base type if |dims| = 1
	    boolean b = true;
	    for (int i=0; i<al.elements().nchildren; i++) {
		if (at.getDepth() == 1) 
		    b = b && arrayAssignmentCompatible(at.baseType(), (Expression)al.elements().children[i]);
		else { 
		    ArrayType at1 = new ArrayType(at.baseType(), at.getDepth()-1);
		    b = b  && arrayAssignmentCompatible(at1, (Expression)al.elements().children[i]);
		}
	    }
	    return b;
	} else if (t instanceof ArrayType && !(e instanceof ArrayLiteral)) {
	    Type t1 = (Type)e.visit(this);
	    if (t1 instanceof ArrayType)
		if (!Type.assignmentCompatible(t,t1))
		    Error.error("Incompatible type in array assignment");
		else
		    return true;
	    Error.error(t, "Error: cannot assign non array to array type " + t.typeName());	    
	}
	else if (!(t instanceof ArrayType) && (e instanceof ArrayLiteral)) {
	    Error.error(t, "Error: cannot assign value " + ((ArrayLiteral)e).toString() + " to type " + t.typeName());
	}
	return Type.assignmentCompatible(t,(Type)e.visit(this));
    }
    
    public Object visitArrayLiteral(ArrayLiteral al) {
	// Espresso does not allow array literals without the 'new <type>' part.
	Error.error(al, "Array literal must be preceeded by a 'new <type>'");
	return null;
    }
    
    /** ASSIGNMENT */
    public Object visitAssignment(Assignment as) {
	println(as.line + ": Visiting an assignment");

	Type vType = (Type) as.left().visit(this);
	Type eType = (Type) as.right().visit(this);

	/** Note: as.left() should be of NameExpr or FieldRef class! */

	if (!vType.assignable())          
	    Error.error(as,"Left hand side of assignment not assignable.");

	switch (as.op().kind) {
	case AssignmentOp.EQ : {
	    // Check if the right hand side is a constant.	    
	    // if we don't do this the following is illegal: byte b; b = 4; because 4 is an it!
	    if (as.right().isConstant()) {
		if (vType.isShortType() && Literal.isShortValue(((BigDecimal)as.right().constantValue()).longValue()))
		    break;
		if (vType.isByteType() && Literal.isByteValue(((BigDecimal)as.right().constantValue()).longValue()))
		    break;		
		if (vType.isCharType() && Literal.isCharValue(((BigDecimal)as.right().constantValue()).longValue()))
		    break;
	    }
		     
	    if (!Type.assignmentCompatible(vType,eType))
		Error.error(as,"Cannot assign value of type " + eType.typeName() + " to variable of type " + vType.typeName() + ".");
	    break;
	}
	

	    // YOUR CODE HERE

	}
	as.type = vType;
	println(as.line + ": Assignment has type: " + as.type);

	return vType;
    }

    /** BINARY EXPRESSION */
    public Object visitBinaryExpr(BinaryExpr be) {
	println(be.line + ": Visiting a Binary Expression");

	// YOUR CODE HERE
	Type left = (Type) be.left().visit(this);
	Type right = (Type) be.right().visit(this);
	BinOp beOP = be.op();
	
	switch (beOP.kind) {
	case BinOp.LT:
	case BinOp.GT:
	case BinOp.LTEQ:
	case BinOp.GTEQ:
	case BinOp.AND:
	case BinOp.OR:
	case BinOp.EQEQ:
	case BinOp.NOTEQ:
		be.type=new PrimitiveType(1);
	case BinOp.XOR:
	case BinOp.MINUS:
	case BinOp.DIV:
	case BinOp.MULT:
		if (!(left.isNumericType() && right.isNumericType()))
			Error.error(be,"Incompatible Operands.");
		else{
			if (left.isDoubleType() || left.isFloatType() || 
					right.isFloatType()|| right.isDoubleType())
				be.type=new PrimitiveType(8);
		}
		break;
	case BinOp.RSHIFT:
	case BinOp.RRSHIFT:
	case BinOp.LSHIFT:
	case BinOp.MOD:
		if (!(left.isIntegerType() && right.isIntegerType()))
			Error.error(be,"InCompatible Operands");
		break;
	default:
		break;
		
	}
	if (be.type==null)
		be.type=left;
	println(be.line + ": Binary Expression has type: " + be.type);
	return be.type;
    }

    /** CAST EXPRESSION */
    public Object visitCastExpr(CastExpr ce) {
	println(ce.line + ": Visiting a cast expression");

	// YOUR CODE HERE
	Type cer = (Type)ce.expr().visit(this);
	ce.type().visit(this);
	if (cer.isClassType() && 
			Type.isSuper((ClassType)ce.expr().visit(this), (ClassType)ce.type()))
		System.out.println("Cast Expression Possible.");
	else
		System.out.println("Invalid Cast Expression.");

	println(ce.line + ": Cast Expression has type: " + ce.type);
	return ce.type;
    }

    /** CLASSTYPE */
    public Object visitClassType(ClassType ct) {
	println(ct.line + ": Visiting a class type");

	println(ct.line + ": Class Type has type: " + ct);
	return ct;
    }

    /** CONSTRUCTOR (EXPLICIT) INVOCATION */
    public Object visitCInvocation(CInvocation ci) {
	println(ci.line + ": Visiting an explicit constructor invocation");

	// YOUR CODE HERE
	ci.visitChildren(this);

	return null;
    }

    /** CLASS DECLARATION */
    public Object visitClassDecl(ClassDecl cd) {
	println(cd.line + ": Visiting a class declaration");

	// YOUR CODE HERE
	//System.out.println("Class Methods: "+cd.allMethods.nchildren);
	this.currentClass = cd;
	for (int i =0;i<cd.body().nchildren;++i)
		cd.body().children[i].visit(this);
	

	return null;
    }

    /** CONSTRUCTOR DECLARATION */
    public Object visitConstructorDecl(ConstructorDecl cd) {
	println(cd.line + ": Visiting a constructor declaration");

	// YOUR CODE HERE
	this.currentContext=cd;
	Sequence stats = cd.body();
	for (int i =0;i<stats.nchildren;++i)
		stats.children[i].visit(this);
	
	return null;
    }

    /** DO STATEMENT */
    public Object visitDoStat(DoStat ds) {
	println(ds.line + ": Visiting a do statement");

	// YOUR CODE HERE
	if (ds.stat()!=null)
		ds.stat().visit(this);
	if (ds.expr()!=null){
		Type etype = (Type) ds.expr().visit(this);
		
		if (!etype.isBooleanType())
			Error.error(ds,"Non Boolean expression found in for Statement");
	}
	
	return null;
    }

    /** FIELD DECLARATION */
    public Object visitFieldDecl(FieldDecl fd) {
	println(fd.line + ": Visiting a field declaration");

	// Update the current context
	currentContext = fd;
	inFieldInit = true;
	currentFieldDecl = fd;
	if (fd.var().init() != null)
	    fd.var().init().visit(this);
	currentFieldDecl = null;
	inFieldInit = false;
	return fd.type();
    }

    /** FIELD REFERENCE */
    public Object visitFieldRef(FieldRef fr) {
	println(fr.line + ": Visiting a field reference" + fr.target());

	Type targetType = (Type) fr.target().visit(this);
	String field    = fr.fieldName().getname();

	// Changed June 22 2012 ARRAY
	if (fr.fieldName().getname().equals("length")) {
	    if (targetType.isArrayType()) {
		fr.type = new PrimitiveType(PrimitiveType.IntKind);
		println(fr.line + ": Field Reference was a an Array.length reference, and it has type: " + fr.type);
		fr.targetType = targetType;
		return fr.type;
	    }
	}

	if (targetType.isClassType()) {
	    ClassType c = (ClassType)targetType;
	    ClassDecl cd = c.myDecl;
	    fr.targetType = targetType;

	    println(fr.line + ": FieldRef: Looking up symbol '" + field + "' in fieldTable of class '" + 
		    c.typeName() + "'.");

	    // Lookup field in the field table of the class associated with the target.
	    FieldDecl lookup = (FieldDecl) NameChecker.NameChecker.getField(field, cd);

	    // Field not found in class.
	    if (lookup == null)
		Error.error(fr,"Field '" + field + "' not found in class '" + cd.name() + "'.");
	    else {
		fr.myDecl = lookup;
		fr.type = lookup.type();
	    }
	} else 
	    Error.error(fr,"Attempt to access field '" + field + "' in something not of class type.");
	println(fr.line + ": Field Reference has type: " + fr.type);

	if (inFieldInit && currentFieldDecl.fieldNumber <= fr.myDecl.fieldNumber && currentClass.name().equals(   (((ClassType)fr.targetType).myDecl).name()))
	    Error.error(fr,"Illegal forward reference of non-initialized field.");

	return fr.type;
    }

    /** FOR STATEMENT */
    public Object visitForStat(ForStat fs) {
	println(fs.line + ": Visiting a for statement");

	// YOUR CODE HERE
	if (fs.init()!=null)
		fs.init().visit(this);
	if (fs.expr()!=null){
		Type etype = (Type) fs.expr().visit(this);
		
		if (!etype.isBooleanType())
			Error.error(fs,"Non Boolean expression found in for Statement");
	}
	if (fs.incr()!=null)
		fs.incr().visit(this);
	if (fs.stats()!=null)
		fs.stats().visit(this);

	return null;
    }

    /** IF STATEMENT */
    public Object visitIfStat(IfStat is) {
	println(is.line + ": Visiting a if statement");

	// YOUR CODE HERE
	if (is.expr()!=null){
		Type etype = (Type) is.expr().visit(this);
		
		if (!etype.isBooleanType())
			Error.error(is,"Non Boolean expression found in IF Statement");
	}
	else
		Error.error(is,"No Expression in the If part of statement.");
	if (is.thenpart()!=null)
		is.thenpart().visit(this);
	else
		System.out.println("If statement had no else part statement.");
	if (is.elsepart()!=null)
		is.elsepart().visit(this);
	else
		Error.error(is,"No Then Part in the IF Staemene.");

	return null;
    }

    /** INVOCATION */
    public Object visitInvocation(Invocation in) {
	println(in.line + ": Visiting an Invocation");

	// YOUR CODE HERE
	//if ((Type)in.target().visit(this)==)
	//in.print();
	in.visitChildren(this);
	//System.out.println(in.);
	//if (tt==null)
		//System.out.println("YESSSS -_-");
//	Type nType = in.targetMethod.getMyClass().
	MethodDecl ml = null;

	//System.out.println("Finding method for class type "+ nType.typeName());
	//if (nType.isClassType()){
			//System.out.println("Entered if clause.");
		ml = (MethodDecl)findMethod(this.currentSequence, in.methodName().getname(), in.params(), true);
		//this.currentSequence = null;
		in.type=ml.returnType();
			//System.out.println("exit If clause");
	//}
	if (ml!=null)
	{
		System.out.println("Method found!");
	}
	println(in.line + ": Invocation has type: " + in.type);
	return in.type;
    }

    /** LITERAL */
    public Object visitLiteral(Literal li) {
	println(li.line + ": Visiting a literal");

	// YOUR CODE HERE
	PrimitiveType pt = new PrimitiveType(li.getKind());
	li.type = (Type)pt;
	
	println(li.line + ": Literal has type: "+li.type);
	return li.type;
    }

    /** METHOD DECLARATION */
    public Object visitMethodDecl(MethodDecl md) {
	println(md.line + ": Visiting a method declaration");

	// YOUR CODE HERE
	currentContext = md;
	Sequence stats = md.block().stats();
	for (int i =0;i<stats.nchildren;++i)
		stats.children[i].visit(this);
	
	return null;
    }

    /** NAME EXPRESSION */
    public Object visitNameExpr(NameExpr ne) {
	println(ne.line + ": Visiting a Name Expression");

	// YOUR CODE HERE
	ne.visitChildren(this);
	
	if (ne.myDecl instanceof FieldDecl)
		ne.type = ((FieldDecl)ne.myDecl).type();
	else if(ne.myDecl instanceof LocalDecl)
		ne.type = ((LocalDecl)ne.myDecl).type();
	else if (ne.myDecl instanceof ParamDecl)
		ne.type = ((ParamDecl)ne.myDecl).type();
	else
		System.out.println("NE Type: " + ne.myDecl.getClass());
	
	if (ne.type instanceof ClassType){
		this.classTable=((ClassType)ne.type).myDecl.methodTable;
		this.currentSequence=((ClassType)ne.type).myDecl.allMethods;
	}
	println(ne.line + ": Name Expression has type: " + ne.type);
	return ne.type;
    }

    /** NEW */
    public Object visitNew(New ne) {
	println(ne.line + ": Visiting a new");

	// YOUR CODE HERE
	for (int i =0;i<ne.args().nchildren;++i)
		ne.args().children[i].visit(this);
	ClassDecl cd = ne.type().myDecl;
	Object o = findMethod(cd.constructors,cd.name(),
			ne.args(),false);
	
	if (o!=null)
		ne.setConstructorDecl((ConstructorDecl)o);
	ne.getConstructorDecl().cinvocation().visit(this);
	ne.type=ne.type();
	this.currentSequence=cd.allMethods;

	println(ne.line + ": New has type: " + ne.type);
	return ne.type;
    }


    /** RETURN STATEMENT */
    public Object visitReturnStat(ReturnStat rs) {
	println(rs.line + ": Visiting a return statement");
	Type returnType;

	if (currentContext instanceof MethodDecl)
	    returnType = ((MethodDecl)currentContext).returnType();
	else
	    returnType = null;

	// Check is there is a return in a Static Initializer
	if (currentContext instanceof StaticInitDecl) 
	    Error.error(rs,"return outside method");

	// Check if a void method is returning something.
	if (returnType == null || returnType.isVoidType()) {
	    if (rs.expr() != null)
		Error.error(rs, "Return statement of a void function cannot return a value.");
	    return null;
	}

	// Check if a non void method is returning without a proper value.
	if (rs.expr() == null)
	    Error.error(rs, "Non void function must return a value.");
	
	Type returnValueType = (Type) rs.expr().visit(this);
	if (rs.expr().isConstant()) {
	    if (returnType.isShortType() && Literal.isShortValue(((BigDecimal)rs.expr().constantValue()).longValue()))
		;// is ok break;                                                                                                    
	    else if (returnType.isByteType() && Literal.isByteValue(((BigDecimal)rs.expr().constantValue()).longValue()))
		; // is ok break;                                                                                                   
	    else if (returnType.isCharType() && Literal.isCharValue(((BigDecimal)rs.expr().constantValue()).longValue()))
		; // break;
	    else if (!Type.assignmentCompatible(returnType,returnValueType))
		Error.error(rs, "Illegal value of type " + returnValueType.typeName() + 
			    " in method expecting value of type " + returnType.typeName() + ".");
	} else if (!Type.assignmentCompatible(returnType,returnValueType))
	    Error.error(rs, "Illegal value of type " + returnValueType.typeName() + 
			" in method expecting value of type " + returnType.typeName() + ".");
		
	rs.setType(returnType);
	return null;
    }

    /** STATIC INITIALIZER */
    public Object visitStaticInitDecl(StaticInitDecl si) {
	println(si.line + ": Visiting a static initializer");

	// YOUR CODE HERE

	return null;
    }

    /** SUPER */
    public Object visitSuper(Super su) {
	println(su.line + ": Visiting a super");

	// YOUR CODE HERE
	su.type=su.type();

	return su.type;
    }

    /** SWITCH STATEMENT */
    public Object visitSwitchStat(SwitchStat ss) {
	println(ss.line + ": Visiting a Switch statement");

	// YOUR CODE HERE

	return null;
    }

    /** TERNARY EXPRESSION */
    public Object visitTernary(Ternary te) {
	println(te.line + ": Visiting a ternary expression");

	// YOUR CODE HERE

	println(te.line + ": Ternary has type: " + te.type);
	return te.type;
    }

    /** THIS */
    public Object visitThis(This th) {
	println(th.line + ": Visiting a this statement");

	th.type = th.type();

	println(th.line + ": This has type: " + th.type);
	return th.type;
    }

    /** UNARY POST EXPRESSION */
    public Object visitUnaryPostExpr(UnaryPostExpr up) {
	println(up.line + ": Visiting a unary post expression");

	// YOUR CODE HERE
	Type eType = (Type)up.expr().visit(this);
	if (!eType.isIntegerType())
		System.out.println("Cannt applly Unary Post Expression to a non integer.");

	up.type=eType;
	
	println(up.line + ": Unary Post Expression has type: " + up.type);
	return eType;
    }

    /** UNARY PRE EXPRESSION */
    public Object visitUnaryPreExpr(UnaryPreExpr up) {
	println(up.line + ": Visiting a unary pre expression");

	// YOUR CODE HERE
	Type eType = (Type)up.expr().visit(this);
	if (!eType.isIntegerType())
		System.out.println("Cannt applly Unary Pre Expression to a non integer.");
	
	up.type=eType;
	
	println(up.line + ": Unary Pre Expression has type: " + up.type);
	return up.type;
    }

    /** VAR */
    public Object visitVar(Var va) {
	println(va.line + ": Visiting a var");

	// YOUR CODE HERE
	//va.print();
	if (va.init()!=null)
		va.init().visit(this);

	return null;
    }

    /** WHILE STATEMENT */
    public Object visitWhileStat(WhileStat ws) {
	println(ws.line + ": Visiting a while statement"); 

	// YOUR CODE HERE
	if (ws.expr()!=null){
		Type etype = (Type) ws.expr().visit(this);
		
		if (!etype.isBooleanType())
			Error.error(ws,"Non Boolean expression found in for Statement");
	}
	if (ws.stat()!=null)
		ws.stat().visit(this);

	return null;
    }

}

